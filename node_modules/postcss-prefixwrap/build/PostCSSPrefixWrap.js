"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PLUGIN_NAME = void 0;
const Selector_1 = __importDefault(require("./Selector"));
exports.PLUGIN_NAME = "postcss-prefixwrap";
class PostCSSPrefixWrap {
    constructor(prefixSelector, options = {}) {
        var _a, _b, _c, _d;
        this.blacklist = (_a = options.blacklist) !== null && _a !== void 0 ? _a : [];
        this.ignoredSelectors = (_b = options.ignoredSelectors) !== null && _b !== void 0 ? _b : [];
        // eslint-disable-next-line security-node/non-literal-reg-expr
        this.isPrefixSelector = new RegExp(`^s*${prefixSelector}.*$`);
        this.prefixRootTags = (_c = options.prefixRootTags) !== null && _c !== void 0 ? _c : false;
        this.prefixSelector = prefixSelector;
        this.whitelist = (_d = options.whitelist) !== null && _d !== void 0 ? _d : [];
    }
    prefixWrapCSSSelector(cssSelector, cssRule) {
        const cleanSelector = Selector_1.default.clean(cssSelector);
        if (cleanSelector === "") {
            return null;
        }
        // Do not prefix keyframes rules.
        if (Selector_1.default.isKeyframes(cssRule)) {
            return cleanSelector;
        }
        // Check for matching ignored selectors
        if (this.ignoredSelectors.some((currentValue) => cleanSelector.match(currentValue))) {
            return cleanSelector;
        }
        // Anything other than a root tag is always prefixed.
        if (Selector_1.default.isNotRootTag(cleanSelector)) {
            return this.prefixSelector + " " + cleanSelector;
        }
        // Handle special case where root tags should be converted into classes
        // rather than being replaced.
        if (this.prefixRootTags) {
            return this.prefixSelector + " ." + cleanSelector;
        }
        // HTML and Body elements cannot be contained within our container so lets
        // extract their styles.
        return cleanSelector.replace(/^(body|html)/, this.prefixSelector);
    }
    cssRuleMatchesPrefixSelector(cssRule) {
        return cssRule.selector.match(this.isPrefixSelector) !== null;
    }
    prefixWrapCSSRule(cssRule) {
        if (this.cssRuleMatchesPrefixSelector(cssRule)) {
            return;
        }
        cssRule.selector = cssRule.selector
            .split(",")
            .map((cssSelector) => this.prefixWrapCSSSelector(cssSelector, cssRule))
            .filter(Selector_1.default.isValid)
            .join(", ");
    }
    includeFile(css) {
        // If whitelist exists, check if rule is contained within it.
        if (this.whitelist.length > 0) {
            return this.whitelist.some((currentValue) => { var _a, _b; return (_b = (_a = css.source) === null || _a === void 0 ? void 0 : _a.input.file) === null || _b === void 0 ? void 0 : _b.match(currentValue); });
        }
        // If blacklist exists, check if rule is not contained within it.
        if (this.blacklist.length > 0) {
            return !this.blacklist.some((currentValue) => { var _a, _b; return (_b = (_a = css.source) === null || _a === void 0 ? void 0 : _a.input.file) === null || _b === void 0 ? void 0 : _b.match(currentValue); });
        }
        // In all other cases, presume rule should be prefixed.
        return true;
    }
    prefixRoot(css) {
        if (this.includeFile(css)) {
            css.walkRules((cssRule) => {
                this.prefixWrapCSSRule(cssRule);
            });
        }
    }
    // eslint-disable-next-line @typescript-eslint/ban-types
    prefix() {
        return (css) => {
            this.prefixRoot(css);
        };
    }
}
exports.default = PostCSSPrefixWrap;
