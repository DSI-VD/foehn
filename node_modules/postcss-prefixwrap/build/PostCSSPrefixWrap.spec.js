"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = __importDefault(require("assert"));
const postcss_1 = __importDefault(require("postcss"));
const PostCSSPrefixWrap_1 = __importDefault(require("./PostCSSPrefixWrap"));
describe("Plugin", () => {
    const prefixSelector = ".my-custom-wrap";
    it("Plugin.cssRuleMatchesPrefixSelector() correctly identifies our prefix Selector", () => {
        const plugin = new PostCSSPrefixWrap_1.default(prefixSelector);
        const cssRule = postcss_1.default.rule({
            selector: prefixSelector,
        });
        assert_1.default.strictEqual(plugin.cssRuleMatchesPrefixSelector(cssRule), true);
    });
    it("Plugin.cssRuleMatchesPrefixSelector() correctly ignores another Selector", () => {
        const plugin = new PostCSSPrefixWrap_1.default(prefixSelector);
        const selector = ".not-my-custom-wrap";
        const cssRule = postcss_1.default.rule({
            selector: selector,
        });
        assert_1.default.strictEqual(plugin.cssRuleMatchesPrefixSelector(cssRule), false);
    });
    it("Plugin.prefixWrapCSSRule() leaves prefix Selector alone", () => {
        const plugin = new PostCSSPrefixWrap_1.default(prefixSelector);
        const cssRule = postcss_1.default.rule({
            selector: prefixSelector,
        });
        plugin.prefixWrapCSSRule(cssRule);
        assert_1.default.strictEqual(cssRule.selector, prefixSelector);
    });
    it("Plugin.prefixWrapCSSRule() does not change for empty Selector", () => {
        const plugin = new PostCSSPrefixWrap_1.default(prefixSelector);
        const cssRule = postcss_1.default.rule({
            selector: "",
        });
        plugin.prefixWrapCSSRule(cssRule);
        assert_1.default.strictEqual(cssRule.selector, "");
    });
    it("Plugin.prefixWrapCSSRule() prefixes non root selectors with prefix Selector", () => {
        const plugin = new PostCSSPrefixWrap_1.default(prefixSelector);
        ["div", "p", "h1"].forEach((selector) => {
            const parent = postcss_1.default.root();
            const cssRule = postcss_1.default.rule({
                selector: selector,
                // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                // @ts-ignore
                parent: parent,
            });
            plugin.prefixWrapCSSRule(cssRule);
            assert_1.default.strictEqual(cssRule.selector, `${prefixSelector} ${selector}`);
        });
    });
    it("handles includeFile with whitelist when missing source input data", () => {
        const plugin = new PostCSSPrefixWrap_1.default(prefixSelector, {
            whitelist: [".something"],
        });
        assert_1.default.strictEqual(
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        plugin.includeFile({
            source: undefined,
        }), false);
        assert_1.default.strictEqual(plugin.includeFile({
            walkRules() {
                //
            },
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore
            source: {
                // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                // @ts-ignore
                input: {
                    file: undefined,
                },
            },
        }), false);
    });
    it("handles includeFile with blacklist when missing source input data", () => {
        const plugin = new PostCSSPrefixWrap_1.default(prefixSelector, {
            blacklist: [".something"],
        });
        assert_1.default.strictEqual(
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        plugin.includeFile({
            source: undefined,
        }), true);
        assert_1.default.strictEqual(plugin.includeFile({
            walkRules() {
                //
            },
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore
            source: {
                // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                // @ts-ignore
                input: {
                    file: undefined,
                },
            },
        }), true);
    });
});
