"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const indexWrap_1 = __importDefault(require("./indexWrap"));
const postcss8 = __importStar(require("postcss"));
const postcss7 = __importStar(require("postcss7"));
describe("indexWrap", () => {
    it("works with PostCSS v8", () => {
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        const plugin = indexWrap_1.default(postcss8)(".selector", {});
        plugin.Once({
            walkRules: () => {
                // Implementation not important for this test
            },
        });
        expect(plugin).not.toBeNull();
    });
    it("works with PostCSS v7", () => {
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        const plugin = indexWrap_1.default(postcss7)(".selector", {});
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        plugin({
            walkRules: () => {
                // Implementation not important for this test
            },
        });
        expect(plugin).not.toBeNull();
    });
});
